#!/bin/bash
# Claude Code pre-commit hook
# このフックはコミット前に自動的にテストとLintを実行します

set -e  # エラーが発生したら即座に終了

echo "🔍 Claude Code Pre-commit Hook を実行中..."

# カラー定義
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# プロジェクトルートディレクトリを取得
PROJECT_ROOT="$(git rev-parse --show-toplevel)"
cd "$PROJECT_ROOT"

# uvが利用可能か確認
if ! command -v uv &> /dev/null; then
    echo -e "${RED}❌ Error: uv が見つかりません。uvをインストールしてください。${NC}"
    exit 1
fi

# ステージされたPythonファイルを取得
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep '\.py$' || true)

if [ -z "$STAGED_FILES" ]; then
    echo -e "${YELLOW}⚠️  ステージされたPythonファイルがありません。スキップします。${NC}"
    exit 0
fi

echo "📝 チェック対象ファイル:"
echo "$STAGED_FILES" | sed 's/^/  - /'
echo ""

# 1. Ruffによるフォーマットチェック
echo "🎨 コードフォーマットをチェック中..."
if ! uv run ruff format --check $STAGED_FILES; then
    echo -e "${YELLOW}⚠️  フォーマットの問題が見つかりました。修正中...${NC}"
    uv run ruff format $STAGED_FILES
    git add $STAGED_FILES
    echo -e "${GREEN}✅ フォーマットを自動修正しました${NC}"
fi

# 2. Ruffによるリントチェック
echo "🔍 コード品質をチェック中..."
if ! uv run ruff check $STAGED_FILES; then
    echo -e "${YELLOW}⚠️  Lintエラーが見つかりました。自動修正を試みます...${NC}"
    if uv run ruff check --fix $STAGED_FILES; then
        git add $STAGED_FILES
        echo -e "${GREEN}✅ 一部のLintエラーを自動修正しました${NC}"
    else
        echo -e "${RED}❌ 自動修正できないLintエラーがあります。手動で修正してください。${NC}"
        exit 1
    fi
fi

# 3. 型チェック（オプション - 警告のみ）
echo "🔤 型チェックを実行中..."
if command -v mypy &> /dev/null; then
    uv run mypy $STAGED_FILES --ignore-missing-imports --no-error-summary 2>/dev/null || {
        echo -e "${YELLOW}⚠️  型チェックで警告がありますが、コミットは続行します${NC}"
    }
else
    echo -e "${YELLOW}⚠️  mypyがインストールされていません。型チェックをスキップします${NC}"
fi

# 4. 変更されたファイルに関連するテストを実行
echo "🧪 関連するテストを実行中..."

# テストファイルのパターンを生成
TEST_PATTERNS=""
for file in $STAGED_FILES; do
    # srcディレクトリのファイルの場合、対応するテストを探す
    if [[ $file == src/* ]]; then
        # src/module/file.py → tests/test_file.py or tests/module/test_file.py
        base_name=$(basename "$file" .py)
        dir_name=$(dirname "$file" | sed 's|^src/||')

        # 可能なテストファイルパターンを追加
        TEST_PATTERNS="$TEST_PATTERNS tests/test_${base_name}.py tests/${dir_name}/test_${base_name}.py"
    fi

    # 直接テストファイルが変更された場合
    if [[ $file == tests/* ]]; then
        TEST_PATTERNS="$TEST_PATTERNS $file"
    fi
done

# 重複を削除して既存のファイルのみを選択
EXISTING_TESTS=""
for pattern in $TEST_PATTERNS; do
    if [ -f "$pattern" ]; then
        EXISTING_TESTS="$EXISTING_TESTS $pattern"
    fi
done

# 重複を削除
EXISTING_TESTS=$(echo $EXISTING_TESTS | tr ' ' '\n' | sort -u | tr '\n' ' ')

if [ -n "$EXISTING_TESTS" ]; then
    echo "🧪 実行するテスト:"
    echo "$EXISTING_TESTS" | tr ' ' '\n' | sed 's/^/  - /'

    # テストを実行（失敗を許可しない）
    if ! uv run pytest $EXISTING_TESTS -x --tb=short -q; then
        echo -e "${RED}❌ テストが失敗しました。修正してからコミットしてください。${NC}"
        exit 1
    fi
else
    echo -e "${YELLOW}⚠️  関連するテストファイルが見つかりません。テストをスキップします。${NC}"
fi

# 5. pre-commitフックの実行（設定されている場合）
if [ -f ".pre-commit-config.yaml" ]; then
    echo "🔧 追加のpre-commitフックを実行中..."
    if command -v pre-commit &> /dev/null; then
        pre-commit run --files $STAGED_FILES || {
            echo -e "${RED}❌ pre-commitフックでエラーが発生しました${NC}"
            exit 1
        }
    fi
fi

echo -e "${GREEN}✅ すべてのチェックが完了しました！コミットを続行します。${NC}"
exit 0
