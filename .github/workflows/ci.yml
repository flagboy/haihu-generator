name: CI

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.12"

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Set up Python
        run: uv python install ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: uv sync --all-extras --dev

      - name: Run format check
        run: uv run poe fmt

      - name: Run linter
        run: uv run poe lint

      - name: Run type check
        run: uv run poe typecheck
        continue-on-error: true

  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgl1-mesa-glx \
            libglib2.0-0 \
            libsm6 \
            libxext6 \
            libxrender-dev \
            libgomp1 \
            libavcodec-dev \
            libavformat-dev \
            libswscale-dev

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Set up Python
        run: uv python install ${{ matrix.python-version }}

      - name: Install dependencies
        run: uv sync --all-extras --dev

      - name: Create necessary directories
        run: |
          mkdir -p data/{input,output,temp,training/{images,annotations,checkpoints,exports,versions,sessions,scheduler,experiments,evaluation/{metrics,reports,visualizations}}}
          mkdir -p models/{detection,classification,exports,checkpoints}
          mkdir -p logs test_{input,output,temp,logs,models} web_interface/{logs,uploads}

      - name: Run tests with coverage
        env:
          PYTHONPATH: ${{ github.workspace }}
        run: |
          uv run pytest --cov=src --cov-report=xml:.pytest_cache/coverage.xml --cov-report=term-missing --maxfail=5

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./.pytest_cache/coverage.xml
          flags: unittests
          name: codecov-python-${{ matrix.python-version }}
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

  security:
    name: Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Set up Python
        run: uv python install ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: uv sync --all-extras --dev

      - name: Run security check
        run: uv run poe security
        continue-on-error: true

  build:
    name: Build check
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Set up Python
        run: uv python install ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: uv sync --all-extras --dev

      - name: Run build check
        run: uv run poe build

      - name: Build package
        run: uv build

      - name: Test Docker build
        run: |
          docker build -t haihu-generator:latest .
          docker run --rm haihu-generator:latest python -c "
          import sys
          sys.path.append('/app')
          import src
          from src.utils.config import ConfigManager
          print('Docker build and import test successful')
          "
        continue-on-error: true