name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
    types: [ opened, synchronize, reopened ]
  workflow_dispatch:

# 重複実行を防ぐ
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: "3.12"

jobs:

  # 高速なLintチェック（並列実行）
  lint:
    name: Lint & Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        run: pip install uv

      - name: Install dependencies (minimal)
        run: uv sync --dev --no-install-project

      - name: Run linting checks in parallel
        run: |
          uv run ruff check . &
          uv run ruff format . --check &
          wait

  # 型チェック（独立して実行）
  typecheck:
    name: Type Check
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        run: pip install uv

      - name: Install dependencies
        run: uv sync --dev

      - name: Run type check
        run: |
          # 基本的な型チェックのみ実行（段階的に改善予定）
          uv run mypy src/ --ignore-missing-imports \
            --disable-error-code=attr-defined \
            --disable-error-code=no-any-return \
            --disable-error-code=arg-type \
            --disable-error-code=return-value \
            --disable-error-code=assignment \
            --disable-error-code=var-annotated \
            --disable-error-code=has-type \
            --disable-error-code=union-attr \
            --disable-error-code=operator \
            --disable-error-code=dict-item \
            --disable-error-code=index \
            --disable-error-code=valid-type \
            --disable-error-code=import-untyped \
            --disable-error-code=unreachable \
            --disable-error-code=misc \
            --disable-error-code=list-item \
            --disable-error-code=call-overload \
            --disable-error-code=call-arg \
            --disable-error-code=return \
            --disable-error-code=type-var

  # セキュリティチェック（独立して実行）
  security:
    name: Security Check
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        run: pip install uv

      - name: Install dependencies
        run: uv sync --dev

      - name: Run security checks
        run: |
          uv run bandit -r src/ -f json -o bandit-report.json || true
          uv run pip-audit --desc || true

  # テストジョブ（最適化）
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      fail-fast: false
      matrix:
        test-group:
          - "unit"
          - "integration"
          - "monitoring"
          - "tenhou"
          - "ai"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup test environment
        run: |
          # システム依存関係のインストール（最小限）
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            libgl1 libglib2.0-0 libsm6 libxext6 libxrender-dev libgomp1

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        run: pip install uv

      - name: Install dependencies
        run: uv sync --dev

      - name: Create test directories
        run: |
          mkdir -p data/{input,output,temp,training/{images,annotations,checkpoints,exports,versions,sessions,scheduler,experiments,evaluation/{metrics,reports,visualizations}}}
          mkdir -p models/{detection,classification,exports,checkpoints}
          mkdir -p logs test_{input,output,temp,logs,models} web_interface/{logs,uploads}

      - name: Run test group - ${{ matrix.test-group }}
        env:
          PYTHONPATH: ${{ github.workspace }}
          DISABLE_MONITORING_AUTO_INIT: "1"
        run: |
          case "${{ matrix.test-group }}" in
            "unit")
              uv run pytest tests/test_*.py tests/unit/ -v --tb=short --durations=10
              ;;
            "integration")
              uv run pytest tests/integration/ tests/optimization/ -v --tb=short --durations=10
              ;;
            "monitoring")
              uv run pytest tests/monitoring/ -v --tb=short
              ;;
            "tenhou")
              uv run pytest tests/test_tenhou*.py -v --tb=short
              ;;
            "ai")
              uv run pytest tests/test_ai*.py tests/test_augmentation.py -v --tb=short
              ;;
          esac

      - name: Upload test results
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.test-group }}
          path: |
            .pytest_cache/
            test_*.log

  # カバレッジ集計（全テスト完了後）
  coverage:
    name: Coverage Report
    runs-on: ubuntu-latest
    needs: test
    if: always() && github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        run: pip install uv

      - name: Install dependencies
        run: uv sync --dev

      - name: Setup test environment
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            libgl1 libglib2.0-0 libsm6 libxext6 libxrender-dev libgomp1
          mkdir -p data/{input,output,temp,training/{images,annotations,checkpoints,exports,versions,sessions,scheduler,experiments,evaluation/{metrics,reports,visualizations}}}
          mkdir -p models/{detection,classification,exports,checkpoints}
          mkdir -p logs test_{input,output,temp,logs,models} web_interface/{logs,uploads}

      - name: Run tests with coverage
        env:
          PYTHONPATH: ${{ github.workspace }}
          DISABLE_MONITORING_AUTO_INIT: "1"
        run: |
          uv run pytest --cov=src --cov-report=xml:.pytest_cache/coverage.xml --cov-report=term-missing

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          file: ./.pytest_cache/coverage.xml
          flags: unittests
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

  # ビルドチェック（メインブランチのみ）
  build:
    name: Build Validation
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        run: pip install uv

      - name: Install dependencies
        run: uv sync --dev

      - name: Build package
        run: |
          uv build
          ls -la dist/

      - name: Test installation
        run: |
          uv pip install dist/*.whl
          python -c "import src; print('Package installation test successful')"

      - name: Docker build test
        run: |
          docker build -t haihu-generator:test .
          docker run --rm haihu-generator:test python -c "import src; print('Docker test successful')"

  # 全体の成功確認
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [lint, typecheck, security, test]
    if: always() && !cancelled()
    steps:
      - name: Check CI Status
        run: |
          if [[ "${{ needs.lint.result }}" != "success" ]] ||
             [[ "${{ needs.test.result }}" != "success" ]]; then
            echo "CI failed!"
            exit 1
          fi
          echo "CI passed successfully!"
